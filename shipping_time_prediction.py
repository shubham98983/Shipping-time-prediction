# -*- coding: utf-8 -*-
"""Shipping_time_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fM0qZPA4G3ny2RKMUTaXC0b6lPVG4KSl
"""

import pandas as pd
df = pd.read_csv('supply_chain_data.csv')
print(df.head())

df.info()

df.describe()

df.isnull().sum()

#SHIPPING TIME PREDICTION LinearRegression
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import matplotlib.pyplot as plt


def train_shipping_model():

    df = pd.read_csv('supply_chain_data.csv')
    features = [
        'Distance', 'Order quantities', 'Transportation modes',
        'Routes', 'Shipping carriers', 'Product type',
        'Location'
    ]
    target = 'Shipping times'

    X = df[features].copy()
    y = df[target]

    categorical_features = ['Transportation modes', 'Routes', 'Shipping carriers', 'Product type', 'Location']
    encoders = {}
    for feature in categorical_features:
        encoders[feature] = LabelEncoder()
        X[feature] = encoders[feature].fit_transform(X[feature])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    numerical_features = ['Distance', 'Order quantities']
    X_train[numerical_features] = scaler.fit_transform(X_train[numerical_features])
    X_test[numerical_features] = scaler.transform(X_test[numerical_features])

    model = LinearRegression()
    model.fit(X_train, y_train)

    # Evaluate model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    feature_importance = pd.DataFrame({
        'feature': features,
        'coefficient': abs(model.coef_)
    }).sort_values('coefficient', ascending=False)

    print("\nModel Performance Metrics:")
    print(f"RMSE: {rmse:.3f}, MAE: {mae:.3f}, R2: {r2:.3f}")

    return {
        'model': model,
        'encoders': encoders,
        'scaler': scaler,
        'numerical_features': numerical_features
    }

def predict_shipping_time(input_data, model_data):
    # Unpack model components
    model = model_data['model']
    encoders = model_data['encoders']
    scaler = model_data['scaler']
    numerical_features = model_data['numerical_features']

    input_df = pd.DataFrame([input_data])

    for feature in encoders:
        input_df[feature] = encoders[feature].transform(input_df[feature])

    input_df[numerical_features] = scaler.transform(input_df[numerical_features])


    shipping_time_pred = model.predict(input_df)

    return shipping_time_pred[0]


model_data = train_shipping_model()


new_input = {
    'Distance': 2000,
    'Order quantities': 11,
    'Transportation modes': 'Road',
    'Routes': 'Route C',
    'Shipping carriers': 'Carrier B',
    'Product type': 'haircare',
    'Location': 'Bangalore'
}


predicted_shipping_time = predict_shipping_time(new_input, model_data)
print(f"Predicted Shipping Time: {predicted_shipping_time:.2f}")

# Shipping time prediction using SVR (Support Vector Regression)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

def train_shipping_svr_model():
    df = pd.read_csv('supply_chain_data.csv')

    # Select relevant features for shipping time prediction
    features = [
        'Distance', 'Order quantities', 'Transportation modes',
        'Routes', 'Shipping carriers', 'Product type',
        'Location'
    ]
    target = 'Shipping times'

    X = df[features].copy()
    y = df[target]

    categorical_features = ['Transportation modes', 'Routes', 'Shipping carriers', 'Product type', 'Location']
    encoders = {}
    for feature in categorical_features:
        encoders[feature] = LabelEncoder()
        X[feature] = encoders[feature].fit_transform(X[feature])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    numerical_features = ['Distance', 'Order quantities']
    X_train[numerical_features] = scaler.fit_transform(X_train[numerical_features])
    X_test[numerical_features] = scaler.transform(X_test[numerical_features])

    svr = SVR()
    param_grid = {
        'kernel': ['linear', 'rbf'],    # Linear and RBF kernels
        'C': [1, 10, 100],              # Regularization parameter
        'gamma': ['scale', 'auto']      # Kernel coefficient
    }
    grid_search = GridSearchCV(svr, param_grid, cv=5, scoring='neg_mean_squared_error')
    grid_search.fit(X_train, y_train)

    best_svr_model = grid_search.best_estimator_

    y_pred = best_svr_model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print("\nModel Performance Metrics:")
    print(f"RMSE: {rmse:.3f}, MAE: {mae:.3f}, R2: {r2:.3f}")

    return {
        'model': best_svr_model,
        'encoders': encoders,
        'scaler': scaler,
        'numerical_features': numerical_features
    }

def predict_shipping_time_svr(input_data, model_data):
    # Unpack model components
    model = model_data['model']
    encoders = model_data['encoders']
    scaler = model_data['scaler']
    numerical_features = model_data['numerical_features']


    input_df = pd.DataFrame([input_data])

    for feature in encoders:
        input_df[feature] = encoders[feature].transform(input_df[feature])

    input_df[numerical_features] = scaler.transform(input_df[numerical_features])


    shipping_time_pred = model.predict(input_df)

    return shipping_time_pred[0]

model_data_svr = train_shipping_svr_model()

new_input_svr = {
   'Distance': 2000,
    'Order quantities': 77,
    'Transportation modes': 'Rail',
    'Routes': 'Route B',
    'Shipping carriers': 'Carrier A',
    'Product type': 'cosmetics',
    'Location': 'Bangalore'
}


predicted_shipping_time_svr = predict_shipping_time_svr(new_input_svr, model_data_svr)
print(f"Predicted Shipping Time with SVR: {predicted_shipping_time_svr:.2f}")

#Shipping time prediction using Random Forest Regressor:
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline


def train_shipping_rf_model():
    df = pd.read_csv('supply_chain_data.csv')
    features = [
        'Distance', 'Order quantities', 'Transportation modes',
        'Routes', 'Shipping carriers', 'Product type',
        'Location'
    ]
    target = 'Shipping times'

    X = df[features]
    y = df[target]

    numerical_features = ['Distance', 'Order quantities']
    categorical_features = ['Transportation modes', 'Routes', 'Shipping carriers', 'Product type', 'Location']

    numerical_transformer = StandardScaler()
    categorical_transformer = OneHotEncoder(handle_unknown='ignore')

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numerical_transformer, numerical_features),
            ('cat', categorical_transformer, categorical_features)
        ])

    rf = RandomForestRegressor(random_state=42)

    pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                               ('model', rf)])

    param_grid = {
        'model__n_estimators': [100, 200],
        'model__max_depth': [10, 20, None],
        'model__min_samples_split': [2, 5],
    }

    grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='neg_mean_squared_error')
    grid_search.fit(X, y)

    best_rf_model = grid_search.best_estimator_

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    best_rf_model.fit(X_train, y_train)
    y_pred = best_rf_model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print("\nModel Performance Metrics:")
    print(f"RMSE: {rmse:.3f}, MAE: {mae:.3f}, R2: {r2:.3f}")

    return best_rf_model, grid_search.best_params_

def predict_shipping_time_rf(input_data, model):
    """
    Predicts shipping time using the trained Random Forest model pipeline.

    Args:
        input_data (dict): A dictionary containing the input features for prediction.
        model: The trained Random Forest model pipeline.

    Returns:
        float: The predicted shipping time.
    """
    # Prepare the input data as a DataFrame
    input_df = pd.DataFrame([input_data])

    # Directly use the pipeline's predict method
    shipping_time_pred = model.predict(input_df)

    return shipping_time_pred[0]

new_input_rf = {
    'Distance': 2000,
    'Order quantities': 77,
    'Transportation modes': 'Rail',
    'Routes': 'Route B',
    'Shipping carriers': 'Carrier A',
    'Product type': 'cosmetics',
    'Location': 'Bangalore'
}

model_data_rf, best_params_rf = train_shipping_rf_model()
print("Best Model Parameters:", best_params_rf)


predicted_shipping_time_rf = predict_shipping_time_rf(new_input_rf, model_data_rf)
print(f"Predicted Shipping Time with Random Forest: {predicted_shipping_time_rf:.2f}")

## Shipping time prediction using XGBoost (Extreme Gradient Boosting)
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

def train_shipping_xgb_model():
    # Load and preprocess data
    df = pd.read_csv('supply_chain_data.csv')


    features = [
        'Distance', 'Order quantities', 'Transportation modes',
        'Routes', 'Shipping carriers', 'Product type',
        'Location'
    ]
    target = 'Shipping times'

    X = df[features]
    y = df[target]


    numerical_features = ['Distance', 'Order quantities']
    categorical_features = ['Transportation modes', 'Routes', 'Shipping carriers', 'Product type', 'Location']

    numerical_transformer = StandardScaler()
    categorical_transformer = OneHotEncoder(handle_unknown='ignore')

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numerical_transformer, numerical_features),
            ('cat', categorical_transformer, categorical_features)
        ])

    xgb = XGBRegressor(objective='reg:squarederror', random_state=42)

    pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                               ('model', xgb)])

    param_grid = {
        'model__n_estimators': [100, 200],
        'model__learning_rate': [0.05, 0.1, 0.2],
        'model__max_depth': [3, 5, 7]
    }


    grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='neg_mean_squared_error')
    grid_search.fit(X, y)


    best_xgb_model = grid_search.best_estimator_


    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    best_xgb_model.fit(X_train, y_train)
    y_pred = best_xgb_model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print("\nModel Performance Metrics:")
    print(f"RMSE: {rmse:.3f}, MAE: {mae:.3f}, R2: {r2:.3f}")

    # Return the trained pipeline directly
    return best_xgb_model, grid_search.best_params_

# Prediction function for XGBoost model (modified)
def predict_shipping_time_xgb(input_data, model):
    """
    Predicts shipping time using the trained XGBoost model pipeline.

    Args:
        input_data (dict): A dictionary containing the input features for prediction.
        model: The trained XGBoost model pipeline.

    Returns:
        float: The predicted shipping time.
    """
    # Prepare the input data as a DataFrame
    input_df = pd.DataFrame([input_data])

    # Directly use the pipeline's predict method
    shipping_time_pred = model.predict(input_df)

    return shipping_time_pred[0]


new_input_xgb = {
     'Distance': 2000,
    'Order quantities': 77,
    'Transportation modes': 'Rail',
    'Routes': 'Route B',
    'Shipping carriers': 'Carrier A',
    'Product type': 'cosmetics',
    'Location': 'Bangalore'
}

model_data, best_params = train_shipping_xgb_model()
print("Best Model Parameters:", best_params)

# Make a prediction using the new input
predicted_shipping_time_xgb = predict_shipping_time_xgb(new_input_xgb, model_data)
print(f"Predicted Shipping Time with XGBoost: {predicted_shipping_time_xgb:.2f}")